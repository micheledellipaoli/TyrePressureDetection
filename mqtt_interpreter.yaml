metadata:
  name: mqtt_interpreter
  labels:
    nuclio.io/project-name: 7f15a68a-45e2-4006-a7cf-f5ec6148febd
spec:
  description: "Function invoked when a new message arrives on the iot/tyre/pressure queue. It retrieves the last 5 rows from Database, interpret datas, and send a message on the iot/console queue."
  handler: "main:handler"
  runtime: nodejs
  resources: {}
  image: "nuclio/processor-mqtt_interpreter:latest"
  minReplicas: 1
  maxReplicas: 1
  targetCPU: 75
  triggers:
    myMqttTrigger:
      kind: mqtt
      attributes:
        subscriptions:
          - topic: iot/tyre/pressure
            qos: 0
      workerAllocatorName: ""
      url: "guest:guest@172.22.83.67:1883"
  build:
    image: ""
    noCache: false
    offline: false
    dependencies: []
    runtimeAttributes:
      repositories: []
    functionSourceCode: dmFyIGFtcXAgPSByZXF1aXJlKCdhbXFwbGliJyk7CnZhciBteXNxbCA9IHJlcXVpcmUoJ215c3FsJyk7IAoKdmFyIEZVTkNUSU9OX05BTUUgPSAibXF0dF9pbnRlcnByZXRlciI7Cgp2YXIgREFUQUJBU0VfSE9TVCA9ICIxNzIuMjIuODMuNjciOwp2YXIgREFUQUJBU0VfUE9SVCA9ICIzMzA2MCI7CnZhciBEQVRBQkFTRV9VU0VSID0gInJvb3QiOwp2YXIgREFUQUJBU0VfUEFTU1dPUkQgPSAiMTIzNCI7ICAKdmFyIERBVEFCQVNFX05BTUUgPSAic2Npb3RfcHJvamVjdCI7IAp2YXIgREFUQUJBU0VfVEFCTEVfTkFNRSA9ICJ0eXJlX3ByZXNzdXJlIjsKCmZ1bmN0aW9uIHJldHJpZXZlRGF0YShjYWxsYmFjayl7CiAgICAKICAJdmFyIGNvbiA9IG15c3FsLmNyZWF0ZUNvbm5lY3Rpb24oeyAgCgkJaG9zdDogREFUQUJBU0VfSE9TVCwKICAgICAgICBwb3J0OiBEQVRBQkFTRV9QT1JULAoJCXVzZXI6IERBVEFCQVNFX1VTRVIsICAKCQlwYXNzd29yZDogREFUQUJBU0VfUEFTU1dPUkQsICAKCQlkYXRhYmFzZTogREFUQUJBU0VfTkFNRSAgICAKCX0pOwoKCWNvbi5jb25uZWN0KGZ1bmN0aW9uKGVycikgeyAgCgkJaWYgKGVycikgdGhyb3cgZXJyOyAgCgkJY29uc29sZS5sb2coIkNvbm5lY3RlZCEiKTsKCgkJdmFyIHNxbDEgPSAiU0VMRUNUICogRlJPTSAoU0VMRUNUICogRlJPTSAiICsgREFUQUJBU0VfTkFNRSArICIuIiArIERBVEFCQVNFX1RBQkxFX05BTUUrIiBPUkRFUiBCWSBpZCBERVNDIExJTUlUIDUpIHN1YiBPUkRFUiBCWSB0aW1lc3RhbXAgQVNDOyI7CgkJCgkJY29uLnF1ZXJ5KHNxbDEsIGZ1bmN0aW9uIChlcnIsIHJlc3VsdHMpIHsgIAoJCQlpZiAoZXJyKSB0aHJvdyBlcnI7CiAgICAgIAkJY29uc29sZS5sb2cocmVzdWx0cy5sZW5ndGggKyAiIHJlY29yZHMgcmV0cmlldmVkXG4iKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3VsdHMpOwoJCX0pOwoJfSk7IAp9CgpmdW5jdGlvbiBpbnRlcnByZXREYXRhKGVyciwgcmVzdWx0cywgY2FsbGJhY2spIHsKICAgIGlmIChlcnIpIHRocm93IGVycjsKICAgIAogICAgdmFyIHByZXNzdXJlVmFsdWVzID0gbmV3IEFycmF5KCk7CiAgICB2YXIgdGltZXN0YW1wVmFsdWVzID0gbmV3IEFycmF5KCk7CiAgICB2YXIgbnVtUmVzdWx0cyA9IHJlc3VsdHMubGVuZ3RoOwogICAgdmFyIGRlbHRhID0gMDsKCiAJdmFyIHN0YW5kYXJkUHJlc3N1cmUgPSAzMDAwOwoJdmFyIG1lc3NhZ2U9IiI7CgogICAgLy8gaXRlcmEgdHV0dGUgbGUgcmlnaGUgZGVsbCdvZ2dldHRvIHJlc3VsdAoJZm9yKHZhciBpPTA7IGk8cmVzdWx0cy5sZW5ndGg7IGkrKyl7CgkJcHJlc3N1cmVWYWx1ZXNbaV0gPSByZXN1bHRzW2ldLnByZXNzdXJlLnRvU3RyaW5nKCk7CgkJdGltZXN0YW1wVmFsdWVzW2ldID0gcmVzdWx0c1tpXS50aW1lc3RhbXAudG9TdHJpbmcoKTsKCQljb25zb2xlLmxvZygicHJlc3N1cmU6ICIrcHJlc3N1cmVWYWx1ZXNbaV0pOwogICAgICAJY29uc29sZS5sb2coInRpbWVzdGFtcDogIit0aW1lc3RhbXBWYWx1ZXNbaV0pOwoJfTsKICAgIAoJLy9DYXNvIDE6IE51bWVybyBkaSByZWNvcmQgcHJlc2VudGkgbmVsIERCIG1pbm9yZSBkaSA1CglpZihudW1SZXN1bHRzPDUpewoJCS8vQ2FzbyAxLjE6IHVsdGltbyB2YWxvcmUgbWlub3JlIGRpIHF1ZWxsbyBzdGFuZGFyZAoJCWlmIChwcmVzc3VyZVZhbHVlc1tudW1SZXN1bHRzLTFdIDwgc3RhbmRhcmRQcmVzc3VyZSl7CgkJCW1lc3NhZ2UgPSAiTG93IFR5cmUgUHJlc3N1cmUgcmVnaXN0ZXJlZCEiOwoJCX1lbHNlewoJCQkvL0Nhc28gMS4yOiBwZW51bG10aW1vIHZhbG9yZSBtaW5vcmUgZGkgcXVlbGxvIHN0YW5kYXJkICYmIHVsdGltbyB2YWxvcmUgbWFnZ2lvcmUgbyB1Z3VhbGUgZGkgcXVlbGxvIHN0YW5kYXJkCgkJCWlmICggKHByZXNzdXJlVmFsdWVzW251bVJlc3VsdHMtMl0gPCBzdGFuZGFyZFByZXNzdXJlKSAmJiAocHJlc3N1cmVWYWx1ZXNbbnVtUmVzdWx0cy0xXSA+PSBzdGFuZGFyZFByZXNzdXJlKSApewoJCQkJbWVzc2FnZSA9ICJUeXJlIHByZXNzdXJlIHJlc3RvcmVkISI7CgkJCX0KCQl9Cgl9ZWxzZXsKCQkvL0Nhc28gMjogTnVtZXJvIGRpIHJlY29yZCBwcmVzZW50aSBuZWwgREIgbWFnZ2lvcmUgbyB1Z3VhbGUgZGkgNSAKICAgICAgICAKICAgICAgICAvL0Nhc28gMi4xOiB1bHRpbW8gdmFsb3JlIG1pbm9yZSBkaSBxdWVsbG8gc3RhbmRhcmQKCQlpZiAocHJlc3N1cmVWYWx1ZXNbbnVtUmVzdWx0cy0xXSA8IHN0YW5kYXJkUHJlc3N1cmUpewoJCQltZXNzYWdlID0gIkxvdyBUeXJlIFByZXNzdXJlIHJlZ2lzdGVyZWQhIjsKCQl9ZWxzZXsKCQkJLy9DYXNvIDIuMjogcGVudWxtdGltbyB2YWxvcmUgbWlub3JlIGRpIHF1ZWxsbyBzdGFuZGFyZCAmJiB1bHRpbW8gdmFsb3JlIG1hZ2dpb3JlIG8gdWd1YWxlIGRpIHF1ZWxsbyBzdGFuZGFyZAoJCQlpZiAoIChwcmVzc3VyZVZhbHVlc1tudW1SZXN1bHRzLTJdIDwgc3RhbmRhcmRQcmVzc3VyZSkgJiYgKHByZXNzdXJlVmFsdWVzW251bVJlc3VsdHMtMV0gPj0gc3RhbmRhcmRQcmVzc3VyZSkgKXsKCQkJCW1lc3NhZ2UgPSAiVHlyZSBwcmVzc3VyZSByZXN0b3JlZCEiOwoJCQl9CgkJfQogICAgICAgIAogICAgICAgIC8vQ2FzbyAyLjM6IHZhbG9yaSBkaSBwcmVzc2lvbmUgZGVjcmVzY2VudGkKICAgICAgICBpZiggKHByZXNzdXJlVmFsdWVzWzBdIDwgc3RhbmRhcmRQcmVzc3VyZSkgJiYgKHByZXNzdXJlVmFsdWVzWzBdPj0gcHJlc3N1cmVWYWx1ZXNbMV0pICYmIChwcmVzc3VyZVZhbHVlc1sxXT49IHByZXNzdXJlVmFsdWVzWzJdKSAmJiAocHJlc3N1cmVWYWx1ZXNbMl0+PSBwcmVzc3VyZVZhbHVlc1szXSkgJiYgKHByZXNzdXJlVmFsdWVzWzNdPj0gcHJlc3N1cmVWYWx1ZXNbNF0pICl7CgkJCQkJCQoJCQl2YXIgc3RhcnRUaW1lID0gRGF0ZS5wYXJzZShuZXcgRGF0ZSh0aW1lc3RhbXBWYWx1ZXNbMF0udG9TdHJpbmcoKSkpOwoJCQl2YXIgZW5kVGltZSA9IERhdGUucGFyc2UodGltZXN0YW1wVmFsdWVzWzRdLnRvU3RyaW5nKCkpOwoKCQkJLy9EaWZmZXJlbnphIGluIG1pbnV0aQoJCQlkZWx0YSA9IE1hdGguZmxvb3IoKChlbmRUaW1lLXN0YXJ0VGltZSkvMTAwMC82MCkpOwoJCQkKCQkJCS8vQ2FzbyAyLjE6IERpZmZlcmVuemEgZGkgdGltZXN0YW1wIG1pbm9yZSBkaSAxIG1pbnV0bwoJCQlpZihkZWx0YTwxKXsKCQkJCW1lc3NhZ2UgPSAiV2FybmluZywgcG9zc2libGUgdHlyZSBwdW5jdHVyZSEiOwoJCQl9ZWxzZXsKCQkJCS8vQ2FzbyAyLjI6IERpZmZlcmVuemEgZGkgdGltZXN0YW1wIG1hZ2dpb3JlIG8gdWd1YWxlIGRpIDEgbWludXRvCgkJCQltZXNzYWdlID0gIkxvdyBUeXJlIFByZXNzdXJlIHJlZ2lzdGVyZWQhIjsKCQkJfQoJCX1lbHNlewoJCQkvL0Nhc28gMzogTnVtZXJvIGRpIHZhbG9yaSBwcmVzZW50aSBuZWwgREIgbWFnZ2lvcmUgbyB1Z3VhbGUgZGkgNSAmJiBwZW51bG10aW1vIHZhbG9yZSBtaW5vcmUgZGkgcXVlbGxvIHN0YW5kYXJkICYmIHVsdGltbyB2YWxvcmUgbWFnZ2lvcmUgbyB1Z3VhbGUgZGkgcXVlbGxvIHN0YW5kYXJkCgkJCWlmICggKHByZXNzdXJlVmFsdWVzWzNdIDwgc3RhbmRhcmRQcmVzc3VyZSkgJiYgKHByZXNzdXJlVmFsdWVzWzRdID49IHN0YW5kYXJkUHJlc3N1cmUpICl7CgkJCQltZXNzYWdlID0gIlR5cmUgUHJlc3N1cmUgcmVzdG9yZWQhIjsKCQkJfWVsc2V7CiAgICAgICAgCQkJLy9DYXNvIDQuMTogcGVudWx0aW1vIHZhbG9yZSBtYWdnaW9yZSBvIHVndWFsZSBkaSBxdWVsbG8gc3RhbmRhcmQgJiYgdWx0aW1vIHZhbG9yZSBtaW5vcmUgZGkgcXVlbGxvIHN0YW5kYXJkCiAgICAgICAgCQkJaWYoIChwcmVzc3VyZVZhbHVlc1szXSA+PSBzdGFuZGFyZFByZXNzdXJlKSAmJiAocHJlc3N1cmVWYWx1ZXNbNF0gPCBzdGFuZGFyZFByZXNzdXJlKSApewogICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gIkxvdyBUeXJlIFByZXNzdXJlIHJlZ2lzdGVyZWQhIjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgCQkJCiAgICAgICAgICAgICAgICAgICAgLy9DYXNvIDQuMjogdmFsb3JpIGRpIHByZXNzaW9uZSBOT04gZGVjcmVzY2VudGksIGVkIHVsdGltbyB2YWxvcmUgbWlub3JlIGRpIHF1ZWxsbyBzdGFuZGFyZAogICAgICAgIAkJCWlmKCAhKChwcmVzc3VyZVZhbHVlc1swXT49IHByZXNzdXJlVmFsdWVzWzFdKSAmJiAocHJlc3N1cmVWYWx1ZXNbMV0+PSBwcmVzc3VyZVZhbHVlc1syXSkgJiYgKHByZXNzdXJlVmFsdWVzWzJdPj0gcHJlc3N1cmVWYWx1ZXNbM10pICYmIChwcmVzc3VyZVZhbHVlc1szXT49IHByZXNzdXJlVmFsdWVzWzRdKSkgJiYgcHJlc3N1cmVWYWx1ZXNbNF0gPCBzdGFuZGFyZFByZXNzdXJlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSAiTG93IFR5cmUgUHJlc3N1cmUgcmVnaXN0ZXJlZCEiOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgLy9DYXNvIDQuMzogcGVudWx0aW1vIGVkIHVsdGltbyB2YWxvcmUgbWFnZ2lvcmkgZGkgcXVlbGxvIHN0YW5kYXJkCiAgICAgICAgICAgICAgICAgICAgaWYoIChwcmVzc3VyZVZhbHVlc1szXSA+PSBzdGFuZGFyZFByZXNzdXJlKSAmJiAocHJlc3N1cmVWYWx1ZXNbNF0gPj0gc3RhbmRhcmRQcmVzc3VyZSkgKXsKICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9ICJUeXJlIFByZXNzdXJlIG9wdGltYWwhIjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgIAkJCX0gICAgICAKCQl9Cgl9CiAgICBjb25zb2xlLmxvZygnbWVzc2FnZTogJyttZXNzYWdlKTsKICAJY2FsbGJhY2sobnVsbCwgbWVzc2FnZSk7Cn0KCmZ1bmN0aW9uIHNlbmRfZmVlZGJhY2soZXJyLCBtc2cpewogICAgaWYoZXJyKSB0aHJvdyBlcnI7CiAgICAKICAgIGNvbnNvbGUubG9nKCJcbnNlbmRfZmVlZGJhY2tbbXNnXTogIittc2cpOwoJdmFyIHEgPSAnaW90L2NvbnNvbGUnOwoJYW1xcC5jb25uZWN0KCdhbXFwOi8vZ3Vlc3Q6Z3Vlc3RAMTcyLjIyLjgzLjY3OjU2NzInKS50aGVuKGZ1bmN0aW9uKGNvbm4pIHsKCQlyZXR1cm4gY29ubi5jcmVhdGVDaGFubmVsKCkudGhlbihmdW5jdGlvbihjaCkgewoJCQl2YXIgb2sgPSBjaC5hc3NlcnRRdWV1ZShxLCB7ZHVyYWJsZTogZmFsc2V9KTsKCQkJcmV0dXJuIG9rLnRoZW4oZnVuY3Rpb24oX3FvaykgewoJCQkJY2guc2VuZFRvUXVldWUocSwgQnVmZmVyLmZyb20obXNnKSk7CgkJCQljb25zb2xlLmxvZygiIFt4XSBTZW50ICclcyciLCBtc2cpOwoJCQkJcmV0dXJuIGNoLmNsb3NlKCk7CgkJCX0pOwoJCX0pLmZpbmFsbHkoZnVuY3Rpb24oKSB7CgkJCWNvbm4uY2xvc2UoKTsKCQl9KTsKCX0pLmNhdGNoKGNvbnNvbGUud2Fybik7Cn0KCmV4cG9ydHMuaGFuZGxlciA9IGZ1bmN0aW9uKGNvbnRleHQsIGV2ZW50KSB7CiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7CgkgICAgcmV0cmlldmVEYXRhKGZ1bmN0aW9uKGVyciwgZGF0YSl7CiAgICAgICAgICAgIGludGVycHJldERhdGEobnVsbCwgZGF0YSwgZnVuY3Rpb24oZXJyLCBkYXRhKSB7CiAgICAgICAgICAgICAgICBzZW5kX2ZlZWRiYWNrKG51bGwsIGRhdGEpOwogICAgICAgICAgICB9KTsKICAgICAgICB9KQogICAgfSwgMTAwMCk7CiAgICBjb250ZXh0LmNhbGxiYWNrKCJmZWVkYmFjayIpOwp9Ow==
    commands:
      - 'npm install amqplib'
      - 'npm install mysql'
    codeEntryType: sourceCode
  platform: {}
  readinessTimeoutSeconds: 60
