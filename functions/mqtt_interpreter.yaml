metadata:
  name: mqtt_interpreter
  labels:
    nuclio.io/project-name: 7f15a68a-45e2-4006-a7cf-f5ec6148febd
spec:
  description: "Function invoked when a new message arrives on the iot/tyre/pressure queue. It retrieves the last 5 rows from Database, interpret datas, and send a message on the iot/console queue."
  handler: "main:handler"
  runtime: nodejs
  resources: {}
  image: "nuclio/processor-mqtt_interpreter:latest"
  minReplicas: 1
  maxReplicas: 1
  targetCPU: 75
  triggers:
    myMqttTrigger:
      class: ""
      kind: mqtt
      url: "guest:guest@172.24.23.53:1883"
      attributes:
        subscriptions:
          - qos: 0
            topic: iot/tyre/pressure
  build:
    functionSourceCode: dmFyIGFtcXAgPSByZXF1aXJlKCdhbXFwbGliJyk7CnZhciBteXNxbCA9IHJlcXVpcmUoJ215c3FsJyk7IAoKdmFyIEZVTkNUSU9OX05BTUUgPSAibXF0dF9pbnRlcnByZXRlciI7Cgp2YXIgREFUQUJBU0VfSE9TVCA9ICIxNzIuMjQuMjMuNTMiOwp2YXIgREFUQUJBU0VfUE9SVCA9ICIzMzA2MCI7CnZhciBEQVRBQkFTRV9VU0VSID0gInJvb3QiOwp2YXIgREFUQUJBU0VfUEFTU1dPUkQgPSAiMTIzNCI7ICAKdmFyIERBVEFCQVNFX05BTUUgPSAic2Npb3RfcHJvamVjdCI7IAp2YXIgREFUQUJBU0VfVEFCTEVfTkFNRSA9ICJ0eXJlX3ByZXNzdXJlIjsKCmZ1bmN0aW9uIHJldHJpZXZlRGF0YShjYWxsYmFjayl7CiAgICAKICAJdmFyIGNvbiA9IG15c3FsLmNyZWF0ZUNvbm5lY3Rpb24oeyAgCgkJaG9zdDogREFUQUJBU0VfSE9TVCwKICAgICAgICBwb3J0OiBEQVRBQkFTRV9QT1JULAoJCXVzZXI6IERBVEFCQVNFX1VTRVIsICAKCQlwYXNzd29yZDogREFUQUJBU0VfUEFTU1dPUkQsICAKCQlkYXRhYmFzZTogREFUQUJBU0VfTkFNRSAgICAKCX0pOwoKCWNvbi5jb25uZWN0KGZ1bmN0aW9uKGVycikgeyAgCgkJaWYgKGVycikgdGhyb3cgZXJyOyAgCgkJY29uc29sZS5sb2coIkNvbm5lY3RlZCEiKTsKCgkJdmFyIHNxbDEgPSAiU0VMRUNUICogRlJPTSAoU0VMRUNUICogRlJPTSAiICsgREFUQUJBU0VfTkFNRSArICIuIiArIERBVEFCQVNFX1RBQkxFX05BTUUrIiBPUkRFUiBCWSBpZCBERVNDIExJTUlUIDUpIHN1YiBPUkRFUiBCWSB0aW1lc3RhbXAgQVNDOyI7CgkJCgkJY29uLnF1ZXJ5KHNxbDEsIGZ1bmN0aW9uIChlcnIsIHJlc3VsdHMpIHsgIAoJCQlpZiAoZXJyKSB0aHJvdyBlcnI7CiAgICAgIAkJY29uc29sZS5sb2cocmVzdWx0cy5sZW5ndGggKyAiIHJlY29yZHMgcmV0cmlldmVkXG4iKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3VsdHMpOwoJCX0pOwoJfSk7IAp9CgpmdW5jdGlvbiBpbnRlcnByZXREYXRhKGVyciwgcmVzdWx0cywgY2FsbGJhY2spIHsKICAgIGlmIChlcnIpIHRocm93IGVycjsKICAgIAogICAgdmFyIHByZXNzdXJlVmFsdWVzID0gbmV3IEFycmF5KCk7CiAgICB2YXIgdGltZXN0YW1wVmFsdWVzID0gbmV3IEFycmF5KCk7CiAgICB2YXIgbnVtUmVzdWx0cyA9IHJlc3VsdHMubGVuZ3RoOwogICAgdmFyIGRlbHRhID0gMDsKCiAJdmFyIHN0YW5kYXJkUHJlc3N1cmUgPSAzMjsKCXZhciBtZXNzYWdlPSIiOwoKICAgIC8vIGl0ZXJhIHR1dHRlIGxlIHJpZ2hlIGRlbGwnb2dnZXR0byByZXN1bHQKCWZvcih2YXIgaT0wOyBpPHJlc3VsdHMubGVuZ3RoOyBpKyspewoJCXByZXNzdXJlVmFsdWVzW2ldID0gcmVzdWx0c1tpXS5wcmVzc3VyZS50b1N0cmluZygpOwoJCXRpbWVzdGFtcFZhbHVlc1tpXSA9IHJlc3VsdHNbaV0udGltZXN0YW1wLnRvU3RyaW5nKCk7CgkJY29uc29sZS5sb2coInByZXNzdXJlOiAiK3ByZXNzdXJlVmFsdWVzW2ldKTsKICAgICAgCWNvbnNvbGUubG9nKCJ0aW1lc3RhbXA6ICIrdGltZXN0YW1wVmFsdWVzW2ldKTsKCX07CiAgICAKCS8vQ2FzbyAxOiBOdW1lcm8gZGkgcmVjb3JkIHByZXNlbnRpIG5lbCBEQiBtaW5vcmUgZGkgNQoJaWYobnVtUmVzdWx0czw1KXsKCQkvL0Nhc28gMS4xOiB1bHRpbW8gdmFsb3JlIG1pbm9yZSBkaSBxdWVsbG8gc3RhbmRhcmQKCQlpZiAocHJlc3N1cmVWYWx1ZXNbbnVtUmVzdWx0cy0xXSA8IHN0YW5kYXJkUHJlc3N1cmUpewoJCQltZXNzYWdlID0gIkxvdyBUeXJlIFByZXNzdXJlIHJlZ2lzdGVyZWQhIjsKCQl9ZWxzZXsKCQkJLy9DYXNvIDEuMjogcGVudWxtdGltbyB2YWxvcmUgbWlub3JlIGRpIHF1ZWxsbyBzdGFuZGFyZCAmJiB1bHRpbW8gdmFsb3JlIG1hZ2dpb3JlIG8gdWd1YWxlIGRpIHF1ZWxsbyBzdGFuZGFyZAoJCQlpZiAoIChwcmVzc3VyZVZhbHVlc1tudW1SZXN1bHRzLTJdIDwgc3RhbmRhcmRQcmVzc3VyZSkgJiYgKHByZXNzdXJlVmFsdWVzW251bVJlc3VsdHMtMV0gPj0gc3RhbmRhcmRQcmVzc3VyZSkgKXsKCQkJCW1lc3NhZ2UgPSAiVHlyZSBwcmVzc3VyZSByZXN0b3JlZCEiOwoJCQl9CgkJfQoJfWVsc2V7CgkJLy9DYXNvIDI6IE51bWVybyBkaSByZWNvcmQgcHJlc2VudGkgbmVsIERCIG1hZ2dpb3JlIG8gdWd1YWxlIGRpIDUgCiAgICAgICAgCiAgICAgICAgLy9DYXNvIDIuMTogdWx0aW1vIHZhbG9yZSBtaW5vcmUgZGkgcXVlbGxvIHN0YW5kYXJkCgkJaWYgKHByZXNzdXJlVmFsdWVzW251bVJlc3VsdHMtMV0gPCBzdGFuZGFyZFByZXNzdXJlKXsKCQkJbWVzc2FnZSA9ICJMb3cgVHlyZSBQcmVzc3VyZSByZWdpc3RlcmVkISI7CgkJfWVsc2V7CgkJCS8vQ2FzbyAyLjI6IHBlbnVsbXRpbW8gdmFsb3JlIG1pbm9yZSBkaSBxdWVsbG8gc3RhbmRhcmQgJiYgdWx0aW1vIHZhbG9yZSBtYWdnaW9yZSBvIHVndWFsZSBkaSBxdWVsbG8gc3RhbmRhcmQKCQkJaWYgKCAocHJlc3N1cmVWYWx1ZXNbbnVtUmVzdWx0cy0yXSA8IHN0YW5kYXJkUHJlc3N1cmUpICYmIChwcmVzc3VyZVZhbHVlc1tudW1SZXN1bHRzLTFdID49IHN0YW5kYXJkUHJlc3N1cmUpICl7CgkJCQltZXNzYWdlID0gIlR5cmUgcHJlc3N1cmUgcmVzdG9yZWQhIjsKCQkJfQoJCX0KICAgICAgICAKICAgICAgICAvL0Nhc28gMi4zOiB2YWxvcmkgZGkgcHJlc3Npb25lIGRlY3Jlc2NlbnRpCiAgICAgICAgaWYoIChwcmVzc3VyZVZhbHVlc1swXSA8IHN0YW5kYXJkUHJlc3N1cmUpICYmIChwcmVzc3VyZVZhbHVlc1swXT49IHByZXNzdXJlVmFsdWVzWzFdKSAmJiAocHJlc3N1cmVWYWx1ZXNbMV0+PSBwcmVzc3VyZVZhbHVlc1syXSkgJiYgKHByZXNzdXJlVmFsdWVzWzJdPj0gcHJlc3N1cmVWYWx1ZXNbM10pICYmIChwcmVzc3VyZVZhbHVlc1szXT49IHByZXNzdXJlVmFsdWVzWzRdKSApewoJCQkJCQkKCQkJdmFyIHN0YXJ0VGltZSA9IERhdGUucGFyc2UobmV3IERhdGUodGltZXN0YW1wVmFsdWVzWzBdLnRvU3RyaW5nKCkpKTsKCQkJdmFyIGVuZFRpbWUgPSBEYXRlLnBhcnNlKHRpbWVzdGFtcFZhbHVlc1s0XS50b1N0cmluZygpKTsKCgkJCS8vRGlmZmVyZW56YSBpbiBtaW51dGkKCQkJZGVsdGEgPSBNYXRoLmZsb29yKCgoZW5kVGltZS1zdGFydFRpbWUpLzEwMDAvNjApKTsKCQkJCgkJCQkvL0Nhc28gMi4xOiBEaWZmZXJlbnphIGRpIHRpbWVzdGFtcCBtaW5vcmUgZGkgMSBtaW51dG8KCQkJaWYoZGVsdGE8MSl7CgkJCQltZXNzYWdlID0gIldhcm5pbmcsIHBvc3NpYmxlIHR5cmUgcHVuY3R1cmUhIjsKCQkJfWVsc2V7CgkJCQkvL0Nhc28gMi4yOiBEaWZmZXJlbnphIGRpIHRpbWVzdGFtcCBtYWdnaW9yZSBvIHVndWFsZSBkaSAxIG1pbnV0bwoJCQkJbWVzc2FnZSA9ICJMb3cgVHlyZSBQcmVzc3VyZSByZWdpc3RlcmVkISI7CgkJCX0KCQl9ZWxzZXsKCQkJLy9DYXNvIDM6IE51bWVybyBkaSB2YWxvcmkgcHJlc2VudGkgbmVsIERCIG1hZ2dpb3JlIG8gdWd1YWxlIGRpIDUgJiYgcGVudWxtdGltbyB2YWxvcmUgbWlub3JlIGRpIHF1ZWxsbyBzdGFuZGFyZCAmJiB1bHRpbW8gdmFsb3JlIG1hZ2dpb3JlIG8gdWd1YWxlIGRpIHF1ZWxsbyBzdGFuZGFyZAoJCQlpZiAoIChwcmVzc3VyZVZhbHVlc1szXSA8IHN0YW5kYXJkUHJlc3N1cmUpICYmIChwcmVzc3VyZVZhbHVlc1s0XSA+PSBzdGFuZGFyZFByZXNzdXJlKSApewoJCQkJbWVzc2FnZSA9ICJUeXJlIFByZXNzdXJlIHJlc3RvcmVkISI7CgkJCX1lbHNlewogICAgICAgIAkJCS8vQ2FzbyA0LjE6IHBlbnVsdGltbyB2YWxvcmUgbWFnZ2lvcmUgbyB1Z3VhbGUgZGkgcXVlbGxvIHN0YW5kYXJkICYmIHVsdGltbyB2YWxvcmUgbWlub3JlIGRpIHF1ZWxsbyBzdGFuZGFyZAogICAgICAgIAkJCWlmKCAocHJlc3N1cmVWYWx1ZXNbM10gPj0gc3RhbmRhcmRQcmVzc3VyZSkgJiYgKHByZXNzdXJlVmFsdWVzWzRdIDwgc3RhbmRhcmRQcmVzc3VyZSkgKXsKICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9ICJMb3cgVHlyZSBQcmVzc3VyZSByZWdpc3RlcmVkISI7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgIAkJCQogICAgICAgICAgICAgICAgICAgIC8vQ2FzbyA0LjI6IHZhbG9yaSBkaSBwcmVzc2lvbmUgTk9OIGRlY3Jlc2NlbnRpLCBlZCB1bHRpbW8gdmFsb3JlIG1pbm9yZSBkaSBxdWVsbG8gc3RhbmRhcmQKICAgICAgICAJCQlpZiggISgocHJlc3N1cmVWYWx1ZXNbMF0+PSBwcmVzc3VyZVZhbHVlc1sxXSkgJiYgKHByZXNzdXJlVmFsdWVzWzFdPj0gcHJlc3N1cmVWYWx1ZXNbMl0pICYmIChwcmVzc3VyZVZhbHVlc1syXT49IHByZXNzdXJlVmFsdWVzWzNdKSAmJiAocHJlc3N1cmVWYWx1ZXNbM10+PSBwcmVzc3VyZVZhbHVlc1s0XSkpICYmIHByZXNzdXJlVmFsdWVzWzRdIDwgc3RhbmRhcmRQcmVzc3VyZSkgewogICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gIkxvdyBUeXJlIFByZXNzdXJlIHJlZ2lzdGVyZWQhIjsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIC8vQ2FzbyA0LjM6IHBlbnVsdGltbyBlZCB1bHRpbW8gdmFsb3JlIG1hZ2dpb3JpIGRpIHF1ZWxsbyBzdGFuZGFyZAogICAgICAgICAgICAgICAgICAgIGlmKCAocHJlc3N1cmVWYWx1ZXNbM10gPj0gc3RhbmRhcmRQcmVzc3VyZSkgJiYgKHByZXNzdXJlVmFsdWVzWzRdID49IHN0YW5kYXJkUHJlc3N1cmUpICl7CiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSAiVHlyZSBQcmVzc3VyZSBvcHRpbWFsISI7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAJCQl9ICAgICAgCgkJfQoJfQogICAgY29uc29sZS5sb2coJ21lc3NhZ2U6ICcrbWVzc2FnZSk7CiAgCWNhbGxiYWNrKG51bGwsIG1lc3NhZ2UpOwp9CgpmdW5jdGlvbiBzZW5kX2ZlZWRiYWNrKGVyciwgbXNnKXsKICAgIGlmKGVycikgdGhyb3cgZXJyOwogICAgCiAgICBjb25zb2xlLmxvZygiXG5zZW5kX2ZlZWRiYWNrW21zZ106ICIrbXNnKTsKCXZhciBxID0gJ2lvdC9jb25zb2xlJzsKCWFtcXAuY29ubmVjdCgnYW1xcDovL2d1ZXN0Omd1ZXN0QDE3Mi4yNC4yMy41Mzo1NjcyJykudGhlbihmdW5jdGlvbihjb25uKSB7CgkJcmV0dXJuIGNvbm4uY3JlYXRlQ2hhbm5lbCgpLnRoZW4oZnVuY3Rpb24oY2gpIHsKCQkJdmFyIG9rID0gY2guYXNzZXJ0UXVldWUocSwge2R1cmFibGU6IGZhbHNlfSk7CgkJCXJldHVybiBvay50aGVuKGZ1bmN0aW9uKF9xb2spIHsKCQkJCWNoLnNlbmRUb1F1ZXVlKHEsIEJ1ZmZlci5mcm9tKG1zZykpOwoJCQkJY29uc29sZS5sb2coIiBbeF0gU2VudCAnJXMnIiwgbXNnKTsKCQkJCXJldHVybiBjaC5jbG9zZSgpOwoJCQl9KTsKCQl9KS5maW5hbGx5KGZ1bmN0aW9uKCkgewoJCQljb25uLmNsb3NlKCk7CgkJfSk7Cgl9KS5jYXRjaChjb25zb2xlLndhcm4pOwp9CgpleHBvcnRzLmhhbmRsZXIgPSBmdW5jdGlvbihjb250ZXh0LCBldmVudCkgewogICAgc2V0VGltZW91dChmdW5jdGlvbigpewoJICAgIHJldHJpZXZlRGF0YShmdW5jdGlvbihlcnIsIGRhdGEpewogICAgICAgICAgICBpbnRlcnByZXREYXRhKG51bGwsIGRhdGEsIGZ1bmN0aW9uKGVyciwgZGF0YSkgewogICAgICAgICAgICAgICAgc2VuZF9mZWVkYmFjayhudWxsLCBkYXRhKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfSkKICAgIH0sIDEwMDApOwogICAgY29udGV4dC5jYWxsYmFjaygiZmVlZGJhY2siKTsKfTs=
    commands:
      - 'npm install amqplib'
      - 'npm install mysql'
    runtimeAttributes:
      repositories: []
    codeEntryType: sourceCode
  platform: {}
  readinessTimeoutSeconds: 60
  version: 1
