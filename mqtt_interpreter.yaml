metadata:
  name: mqtt_interpreter
  labels:
    nuclio.io/project-name: 7f15a68a-45e2-4006-a7cf-f5ec6148febd
spec:
  description: "Function invoked when a new message arrives on the iot/tyre/pressure queue. It retrieves the last 5 rows from Database, interpret datas, and send a message on the iot/console queue."
  handler: "main:handler"
  runtime: nodejs
  resources: {}
  image: "nuclio/processor-mqtt_interpreter:latest"
  minReplicas: 1
  maxReplicas: 1
  targetCPU: 75
  triggers:
    myMqttTrigger:
      kind: mqtt
      attributes:
        subscriptions:
          - topic: iot/tyre/pressure
            qos: 0
      workerAllocatorName: ""
      url: "guest:guest@172.22.91.115:1883"
  build:
    image: ""
    noCache: false
    offline: false
    dependencies: []
    runtimeAttributes:
      repositories: []
    functionSourceCode: dmFyIGFtcXAgPSByZXF1aXJlKCdhbXFwbGliJyk7CnZhciBteXNxbCA9IHJlcXVpcmUoJ215c3FsJyk7IAoKdmFyIEZVTkNUSU9OX05BTUUgPSAibXF0dF9pbnRlcnByZXRlciI7CgovKgp2YXIgREFUQUJBU0VfSE9TVCA9ICI5NS4xMTAuMTcxLjE4IjsKdmFyIERBVEFCQVNFX1BPUlQgPSAiMzMwNiI7CnZhciBEQVRBQkFTRV9VU0VSID0gIjEwMDQ5XzIyOSI7CnZhciBEQVRBQkFTRV9QQVNTV09SRCA9ICJtaWtlODE4MCI7ICAKdmFyIERBVEFCQVNFX05BTUUgPSAiZGJpbnN0YW5jZV8xMDA0OV8xIjsgCnZhciBEQVRBQkFTRV9UQUJMRV9OQU1FID0gInNjaW90X3Byb2plY3QiOwoqLwoKdmFyIERBVEFCQVNFX0hPU1QgPSAiMTcyLjIyLjkxLjExNSI7CnZhciBEQVRBQkFTRV9QT1JUID0gIjMzMDYwIjsKdmFyIERBVEFCQVNFX1VTRVIgPSAicm9vdCI7CnZhciBEQVRBQkFTRV9QQVNTV09SRCA9ICIxMjM0IjsgIAp2YXIgREFUQUJBU0VfTkFNRSA9ICJzY2lvdF9wcm9qZWN0IjsgCnZhciBEQVRBQkFTRV9UQUJMRV9OQU1FID0gInR5cmVfcHJlc3N1cmUiOwoKZnVuY3Rpb24gcmV0cmlldmVEYXRhKGNhbGxiYWNrKXsKICAgIAogIAl2YXIgY29uID0gbXlzcWwuY3JlYXRlQ29ubmVjdGlvbih7ICAKCQlob3N0OiBEQVRBQkFTRV9IT1NULAogICAgICAgIHBvcnQ6IERBVEFCQVNFX1BPUlQsCgkJdXNlcjogREFUQUJBU0VfVVNFUiwgIAoJCXBhc3N3b3JkOiBEQVRBQkFTRV9QQVNTV09SRCwgIAoJCWRhdGFiYXNlOiBEQVRBQkFTRV9OQU1FICAgIAoJfSk7CgoJY29uLmNvbm5lY3QoZnVuY3Rpb24oZXJyKSB7ICAKCQlpZiAoZXJyKSB0aHJvdyBlcnI7ICAKCQljb25zb2xlLmxvZygiQ29ubmVjdGVkISIpOwoKCQl2YXIgc3FsMSA9ICJTRUxFQ1QgKiBGUk9NIChTRUxFQ1QgKiBGUk9NICIgKyBEQVRBQkFTRV9OQU1FICsgIi4iICsgREFUQUJBU0VfVEFCTEVfTkFNRSsiIE9SREVSIEJZIGlkIERFU0MgTElNSVQgNSkgc3ViIE9SREVSIEJZIHRpbWVzdGFtcCBBU0M7IjsKCQkKCQljb24ucXVlcnkoc3FsMSwgZnVuY3Rpb24gKGVyciwgcmVzdWx0cykgeyAgCgkJCWlmIChlcnIpIHRocm93IGVycjsKICAgICAgCQljb25zb2xlLmxvZyhyZXN1bHRzLmxlbmd0aCArICIgcmVjb3JkcyByZXRyaWV2ZWRcbiIpOwogICAgICAgICAgICAKICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdWx0cyk7CgkJfSk7Cgl9KTsgCn0KCmZ1bmN0aW9uIGludGVycHJldERhdGEoZXJyLCByZXN1bHRzLCBjYWxsYmFjaykgewogICAgaWYgKGVycikgdGhyb3cgZXJyOwogICAgCiAgICB2YXIgcHJlc3N1cmVWYWx1ZXMgPSBuZXcgQXJyYXkoKTsKICAgIHZhciB0aW1lc3RhbXBWYWx1ZXMgPSBuZXcgQXJyYXkoKTsKICAgIHZhciBudW1SZXN1bHRzID0gcmVzdWx0cy5sZW5ndGg7CiAgICB2YXIgZGVsdGEgPSAwOwoKIAl2YXIgc3RhbmRhcmRQcmVzc3VyZSA9IDMwMDA7Cgl2YXIgbWVzc2FnZT0iIjsKCiAgICAvLyBpdGVyYSB0dXR0ZSBsZSByaWdoZSBkZWxsJ29nZ2V0dG8gcmVzdWx0Cglmb3IodmFyIGk9MDsgaTxyZXN1bHRzLmxlbmd0aDsgaSsrKXsKCQlwcmVzc3VyZVZhbHVlc1tpXSA9IHJlc3VsdHNbaV0ucHJlc3N1cmUudG9TdHJpbmcoKTsKCQl0aW1lc3RhbXBWYWx1ZXNbaV0gPSByZXN1bHRzW2ldLnRpbWVzdGFtcC50b1N0cmluZygpOwoJCWNvbnNvbGUubG9nKCJwcmVzc3VyZTogIitwcmVzc3VyZVZhbHVlc1tpXSk7CiAgICAgIAljb25zb2xlLmxvZygidGltZXN0YW1wOiAiK3RpbWVzdGFtcFZhbHVlc1tpXSk7Cgl9OwogICAgCgkvL0Nhc28gMTogTnVtZXJvIGRpIHJlY29yZCBwcmVzZW50aSBuZWwgREIgbWlub3JlIGRpIDUKCWlmKG51bVJlc3VsdHM8NSl7CgkJLy9DYXNvIDEuMTogdWx0aW1vIHZhbG9yZSBtaW5vcmUgZGkgcXVlbGxvIHN0YW5kYXJkCgkJaWYgKHByZXNzdXJlVmFsdWVzW251bVJlc3VsdHMtMV0gPCBzdGFuZGFyZFByZXNzdXJlKXsKCQkJbWVzc2FnZSA9ICJMb3cgVHlyZSBQcmVzc3VyZSByZWdpc3RlcmVkISI7CgkJfWVsc2V7CgkJCS8vQ2FzbyAxLjI6IHBlbnVsbXRpbW8gdmFsb3JlIG1pbm9yZSBkaSBxdWVsbG8gc3RhbmRhcmQgJiYgdWx0aW1vIHZhbG9yZSBtYWdnaW9yZSBvIHVndWFsZSBkaSBxdWVsbG8gc3RhbmRhcmQKCQkJaWYgKCAocHJlc3N1cmVWYWx1ZXNbbnVtUmVzdWx0cy0yXSA8IHN0YW5kYXJkUHJlc3N1cmUpICYmIChwcmVzc3VyZVZhbHVlc1tudW1SZXN1bHRzLTFdID49IHN0YW5kYXJkUHJlc3N1cmUpICl7CgkJCQltZXNzYWdlID0gIlR5cmUgcHJlc3N1cmUgcmVzdG9yZWQhIjsKCQkJfQoJCX0KCX1lbHNlewoJCS8vQ2FzbyAyOiBOdW1lcm8gZGkgcmVjb3JkIHByZXNlbnRpIG5lbCBEQiBtYWdnaW9yZSBvIHVndWFsZSBkaSA1IAogICAgICAgIAogICAgICAgIC8vQ2FzbyAyLjE6IHVsdGltbyB2YWxvcmUgbWlub3JlIGRpIHF1ZWxsbyBzdGFuZGFyZAoJCWlmIChwcmVzc3VyZVZhbHVlc1tudW1SZXN1bHRzLTFdIDwgc3RhbmRhcmRQcmVzc3VyZSl7CgkJCW1lc3NhZ2UgPSAiTG93IFR5cmUgUHJlc3N1cmUgcmVnaXN0ZXJlZCEiOwoJCX1lbHNlewoJCQkvL0Nhc28gMi4yOiBwZW51bG10aW1vIHZhbG9yZSBtaW5vcmUgZGkgcXVlbGxvIHN0YW5kYXJkICYmIHVsdGltbyB2YWxvcmUgbWFnZ2lvcmUgbyB1Z3VhbGUgZGkgcXVlbGxvIHN0YW5kYXJkCgkJCWlmICggKHByZXNzdXJlVmFsdWVzW251bVJlc3VsdHMtMl0gPCBzdGFuZGFyZFByZXNzdXJlKSAmJiAocHJlc3N1cmVWYWx1ZXNbbnVtUmVzdWx0cy0xXSA+PSBzdGFuZGFyZFByZXNzdXJlKSApewoJCQkJbWVzc2FnZSA9ICJUeXJlIHByZXNzdXJlIHJlc3RvcmVkISI7CgkJCX0KCQl9CiAgICAgICAgCiAgICAgICAgLy9DYXNvIDIuMzogdmFsb3JpIGRpIHByZXNzaW9uZSBkZWNyZXNjZW50aQogICAgICAgIGlmKCAocHJlc3N1cmVWYWx1ZXNbMF0gPCBzdGFuZGFyZFByZXNzdXJlKSAmJiAocHJlc3N1cmVWYWx1ZXNbMF0+PSBwcmVzc3VyZVZhbHVlc1sxXSkgJiYgKHByZXNzdXJlVmFsdWVzWzFdPj0gcHJlc3N1cmVWYWx1ZXNbMl0pICYmIChwcmVzc3VyZVZhbHVlc1syXT49IHByZXNzdXJlVmFsdWVzWzNdKSAmJiAocHJlc3N1cmVWYWx1ZXNbM10+PSBwcmVzc3VyZVZhbHVlc1s0XSkgKXsKCQkJCQkJCgkJCXZhciBzdGFydFRpbWUgPSBEYXRlLnBhcnNlKG5ldyBEYXRlKHRpbWVzdGFtcFZhbHVlc1swXS50b1N0cmluZygpKSk7CgkJCXZhciBlbmRUaW1lID0gRGF0ZS5wYXJzZSh0aW1lc3RhbXBWYWx1ZXNbNF0udG9TdHJpbmcoKSk7CgoJCQkvL0RpZmZlcmVuemEgaW4gbWludXRpCgkJCWRlbHRhID0gTWF0aC5mbG9vcigoKGVuZFRpbWUtc3RhcnRUaW1lKS8xMDAwLzYwKSk7CgkJCQoJCQkJLy9DYXNvIDIuMTogRGlmZmVyZW56YSBkaSB0aW1lc3RhbXAgbWlub3JlIGRpIDEgbWludXRvCgkJCWlmKGRlbHRhPDEpewoJCQkJbWVzc2FnZSA9ICJXYXJuaW5nLCBwb3NzaWJsZSB0eXJlIHB1bmN0dXJlISI7CgkJCX1lbHNlewoJCQkJLy9DYXNvIDIuMjogRGlmZmVyZW56YSBkaSB0aW1lc3RhbXAgbWFnZ2lvcmUgbyB1Z3VhbGUgZGkgMSBtaW51dG8KCQkJCW1lc3NhZ2UgPSAiTG93IFR5cmUgUHJlc3N1cmUgcmVnaXN0ZXJlZCEiOwoJCQl9CgkJfWVsc2V7CgkJCS8vQ2FzbyAzOiBOdW1lcm8gZGkgdmFsb3JpIHByZXNlbnRpIG5lbCBEQiBtYWdnaW9yZSBvIHVndWFsZSBkaSA1ICYmIHBlbnVsbXRpbW8gdmFsb3JlIG1pbm9yZSBkaSBxdWVsbG8gc3RhbmRhcmQgJiYgdWx0aW1vIHZhbG9yZSBtYWdnaW9yZSBvIHVndWFsZSBkaSBxdWVsbG8gc3RhbmRhcmQKCQkJaWYgKCAocHJlc3N1cmVWYWx1ZXNbM10gPCBzdGFuZGFyZFByZXNzdXJlKSAmJiAocHJlc3N1cmVWYWx1ZXNbNF0gPj0gc3RhbmRhcmRQcmVzc3VyZSkgKXsKCQkJCW1lc3NhZ2UgPSAiVHlyZSBQcmVzc3VyZSByZXN0b3JlZCEiOwoJCQl9ZWxzZXsKICAgICAgICAJCQkvL0Nhc28gNC4xOiBwZW51bHRpbW8gdmFsb3JlIG1hZ2dpb3JlIG8gdWd1YWxlIGRpIHF1ZWxsbyBzdGFuZGFyZCAmJiB1bHRpbW8gdmFsb3JlIG1pbm9yZSBkaSBxdWVsbG8gc3RhbmRhcmQKICAgICAgICAJCQlpZiggKHByZXNzdXJlVmFsdWVzWzNdID49IHN0YW5kYXJkUHJlc3N1cmUpICYmIChwcmVzc3VyZVZhbHVlc1s0XSA8IHN0YW5kYXJkUHJlc3N1cmUpICl7CiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSAiTG93IFR5cmUgUHJlc3N1cmUgcmVnaXN0ZXJlZCEiOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAJCQkKICAgICAgICAgICAgICAgICAgICAvL0Nhc28gNC4yOiB2YWxvcmkgZGkgcHJlc3Npb25lIE5PTiBkZWNyZXNjZW50aSwgZWQgdWx0aW1vIHZhbG9yZSBtaW5vcmUgZGkgcXVlbGxvIHN0YW5kYXJkCiAgICAgICAgCQkJaWYoICEoKHByZXNzdXJlVmFsdWVzWzBdPj0gcHJlc3N1cmVWYWx1ZXNbMV0pICYmIChwcmVzc3VyZVZhbHVlc1sxXT49IHByZXNzdXJlVmFsdWVzWzJdKSAmJiAocHJlc3N1cmVWYWx1ZXNbMl0+PSBwcmVzc3VyZVZhbHVlc1szXSkgJiYgKHByZXNzdXJlVmFsdWVzWzNdPj0gcHJlc3N1cmVWYWx1ZXNbNF0pKSAmJiBwcmVzc3VyZVZhbHVlc1s0XSA8IHN0YW5kYXJkUHJlc3N1cmUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9ICJMb3cgVHlyZSBQcmVzc3VyZSByZWdpc3RlcmVkISI7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAvL0Nhc28gNC4zOiBwZW51bHRpbW8gZWQgdWx0aW1vIHZhbG9yZSBtYWdnaW9yaSBkaSBxdWVsbG8gc3RhbmRhcmQKICAgICAgICAgICAgICAgICAgICBpZiggKHByZXNzdXJlVmFsdWVzWzNdID49IHN0YW5kYXJkUHJlc3N1cmUpICYmIChwcmVzc3VyZVZhbHVlc1s0XSA+PSBzdGFuZGFyZFByZXNzdXJlKSApewogICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gIlR5cmUgUHJlc3N1cmUgb3B0aW1hbCEiOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgCQkJfSAgICAgIAoJCX0KCX0KICAgIGNvbnNvbGUubG9nKCdtZXNzYWdlOiAnK21lc3NhZ2UpOwogIAljYWxsYmFjayhudWxsLCBtZXNzYWdlKTsKfQoKZnVuY3Rpb24gc2VuZF9mZWVkYmFjayhlcnIsIG1zZyl7CiAgICBpZihlcnIpIHRocm93IGVycjsKICAgIAogICAgY29uc29sZS5sb2coIlxuc2VuZF9mZWVkYmFja1ttc2ddOiAiK21zZyk7Cgl2YXIgcSA9ICdpb3QvY29uc29sZSc7CglhbXFwLmNvbm5lY3QoJ2FtcXA6Ly9ndWVzdDpndWVzdEAxNzIuMjIuOTEuMTE1OjU2NzInKS50aGVuKGZ1bmN0aW9uKGNvbm4pIHsKCQlyZXR1cm4gY29ubi5jcmVhdGVDaGFubmVsKCkudGhlbihmdW5jdGlvbihjaCkgewoJCQl2YXIgb2sgPSBjaC5hc3NlcnRRdWV1ZShxLCB7ZHVyYWJsZTogZmFsc2V9KTsKCQkJcmV0dXJuIG9rLnRoZW4oZnVuY3Rpb24oX3FvaykgewoJCQkJY2guc2VuZFRvUXVldWUocSwgQnVmZmVyLmZyb20obXNnKSk7CgkJCQljb25zb2xlLmxvZygiIFt4XSBTZW50ICclcyciLCBtc2cpOwoJCQkJcmV0dXJuIGNoLmNsb3NlKCk7CgkJCX0pOwoJCX0pLmZpbmFsbHkoZnVuY3Rpb24oKSB7CgkJCWNvbm4uY2xvc2UoKTsKCQl9KTsKCX0pLmNhdGNoKGNvbnNvbGUud2Fybik7Cn0KCmV4cG9ydHMuaGFuZGxlciA9IGZ1bmN0aW9uKGNvbnRleHQsIGV2ZW50KSB7CiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7CgkgICAgcmV0cmlldmVEYXRhKGZ1bmN0aW9uKGVyciwgZGF0YSl7CiAgICAgICAgICAgIGludGVycHJldERhdGEobnVsbCwgZGF0YSwgZnVuY3Rpb24oZXJyLCBkYXRhKSB7CiAgICAgICAgICAgICAgICBzZW5kX2ZlZWRiYWNrKG51bGwsIGRhdGEpOwogICAgICAgICAgICB9KTsKICAgICAgICB9KQogICAgfSwgMTAwMCk7CiAgICBjb250ZXh0LmNhbGxiYWNrKCJmZWVkYmFjayIpOwp9Ow==
    commands:
      - 'npm install amqplib'
      - 'npm install mysql'
    codeEntryType: sourceCode
  platform: {}
  readinessTimeoutSeconds: 60
